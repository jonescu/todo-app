/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"App\": () => (/* binding */ App)\n/* harmony export */ });\n/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./storage */ \"./src/storage.js\");\n/* harmony import */ var _taskctrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./taskctrl */ \"./src/taskctrl.js\");\n/* harmony import */ var _ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui */ \"./src/ui.js\");\n\n\n\n// App Controller\nconst App = (function(TaskCtrl, StorageCtrl, UICtrl){\n\n    const loadEventListeners = function(){\n        const UISelectors = UICtrl.getSelectors()\n\n        // Add task / project events\n        document.querySelector(UISelectors.addTaskBtn).addEventListener('click', taskAddSubmit)\n        document.querySelector(UISelectors.addProjectBtn).addEventListener('click', projectAddSubmit)\n\n        // Edit task / projects events\n        document.querySelector(UISelectors.taskList).addEventListener('click', editTask)\n        document.querySelector(UISelectors.projectList).addEventListener('click', editProject)\n\n        // Update task / projects events\n        document.querySelector(UISelectors.updateTaskBtn).addEventListener('click', updateTaskSubmit)\n        document.querySelector(UISelectors.updateProjectBtn).addEventListener('click', updateProjectSubmit)\n\n        // Back button events\n        document.querySelector(UISelectors.cancelProjectBtn).addEventListener('click', UICtrl.clearProjectEditState)\n        document.querySelector(UISelectors.cancelTaskBtn).addEventListener('click', UICtrl.clearTaskEditState)\n\n        // Delete button events\n        document.querySelector(UISelectors.taskList).addEventListener('click', deleteTaskSubmit)\n        document.querySelector(UISelectors.projectList).addEventListener('click', deleteProjectSubmit)\n    }\n\n    const projectAddSubmit = function(e){\n        // Get form input from UI controller\n        const input = UICtrl.getProjectInput()\n        // Check for empty input\n        if(input.name !== '') {\n            // Add task\n            const newProject = TaskCtrl.addProject(input.name)\n            // Add project to UI\n            UICtrl.addProjectUI(newProject)\n            // Add to LS\n            StorageCtrl.storeProject(newProject)\n            // Clear fields\n            UICtrl.clearProjectInput();\n        }\n        e.preventDefault()\n    }\n\n    const taskAddSubmit = function(e){\n        // Get form input from UI controller\n        const input = UICtrl.getTaskInput()\n        // Check for empty input\n        if(input.name !== '' && input.description !== '') {\n            // Add task\n            const newTask = TaskCtrl.addTask(input.name, input.description)\n            // Add task to UI\n            UICtrl.addTaskUI(newTask)\n            // Add to LS\n            StorageCtrl.storeTask(newTask);\n            // Clear fields\n            UICtrl.clearTaskInput();\n        } \n        e.preventDefault()\n    }\n\n    const editTask = function(e){\n        if(e.target.classList.contains('edit-task')){\n            // Get great grandparent id\n            const taskId = e.target.parentElement.parentElement.parentElement.id;\n            // Split\n            const taskIdArray = taskId.split('-')\n            // Get actual id\n            const id = parseInt(taskIdArray[1])\n            // Get task\n            const taskToEdit = TaskCtrl.getTaskById(id)\n            // Set current item\n            TaskCtrl.setCurrentTask(taskToEdit)\n            // Add task to form for editing\n            UICtrl.addTaskToEdit();\n        } \n        e.preventDefault()\n    }\n\n    const updateTaskSubmit = function(e) {\n        // Get task input\n        const input = UICtrl.getTaskInput()\n        // Update task\n        const updatedTask = TaskCtrl.updateTask(input.name, input.description)\n        // Update UI\n        UICtrl.updateTaskList(updatedTask)\n        // Update LS\n        StorageCtrl.updateTaskStorage(updatedTask)\n        // Clear fields\n        UICtrl.clearTaskEditState()\n        e.preventDefault()\n    }\n\n    const editProject = function(e) {\n        if(e.target.classList.contains('edit-project')){\n            // Get great grandparent id\n            const projectId = e.target.parentElement.parentElement.parentElement.id;\n            // Split\n            const projectIdArray = projectId.split('-')\n            // Get actual id\n            const id = parseInt(projectIdArray[1])\n            // Get task\n            const projectToEdit = TaskCtrl.getProjectById(id)\n            // Set current item\n            TaskCtrl.setCurrentProject(projectToEdit)\n            // Add task to form for editing\n            UICtrl.addProjectToEdit();\n        } \n        e.preventDefault()\n    }\n\n    const updateProjectSubmit = function(e) {\n        // Get task input\n        const input = UICtrl.getProjectInput()\n        // Update task\n        const updatedProject = TaskCtrl.updateProject(input.name)\n        // Update UI\n        UICtrl.updateProjectList(updatedProject)\n        // Update LS\n        StorageCtrl.updateProjectStorage(updatedProject)\n        // Clear fields\n        UICtrl.clearProjectEditState()\n        e.preventDefault()\n    }\n\n    const deleteTaskSubmit = function(e){\n        if(e.target.classList.contains('delete-task')){\n          // Get great grandparent id\n          const taskId = e.target.parentElement.parentElement.parentElement.id;\n          // Split\n          const taskIdArray = taskId.split('-')\n          // Get actual id\n          const id = parseInt(taskIdArray[1])\n          // Delete from data structure\n          TaskCtrl.deleteTask(id)\n          // Delete from UI\n          UICtrl.deleteTaskUI(id)\n          // Delete from storage\n          StorageCtrl.deleteTaskFromStorage(id)\n        }\n        e.preventDefault()\n    }\n\n    const deleteProjectSubmit = function(e){\n        if(e.target.classList.contains('delete-project')){\n            // Get great grandparent id\n            const projectId = e.target.parentElement.parentElement.parentElement.id;\n            // Split\n            const projectIdArray = projectId.split('-')\n            // Get actual id\n            const id = parseInt(projectIdArray[1])\n            // Delete from data structure\n            TaskCtrl.deleteProject(id)\n            // Delete from UI\n            UICtrl.deleteProjectUI(id)\n            // Delete from storage\n            StorageCtrl.deleteProjectFromStorage(id)\n          }\n          e.preventDefault()\n    }\n\n    // Public methods\n    return {\n        init: function(){\n            // Set initial state\n            UICtrl.clearProjectEditState()\n            UICtrl.clearTaskEditState()\n            // Fetch items from data structure\n            const tasks = TaskCtrl.getTasks()\n            // Populate list with items\n            UICtrl.populateTaskList(tasks)\n            // Fetch projects from data structure\n            const projects = TaskCtrl.getProjects()\n            // Populate list with projects\n            UICtrl.populateProjectList(projects)\n            // Load event listeners\n            loadEventListeners()\n        }\n    }\n  }\n)(_taskctrl__WEBPACK_IMPORTED_MODULE_1__.TaskCtrl, _storage__WEBPACK_IMPORTED_MODULE_0__.StorageCtrl, _ui__WEBPACK_IMPORTED_MODULE_2__.UICtrl)\n\nApp.init()\n\n\n\n//# sourceURL=webpack://todo-app/./src/index.js?");

/***/ }),

/***/ "./src/storage.js":
/*!************************!*\
  !*** ./src/storage.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StorageCtrl\": () => (/* binding */ StorageCtrl)\n/* harmony export */ });\n\n// Storage Controller\nconst StorageCtrl = (function(){\n    return {\n        storeTask: function(task) {\n            let tasks\n            if(localStorage.getItem('tasks') === null){\n                tasks = []\n                // Push new project\n                tasks.push(task)\n                // Set LS\n                localStorage.setItem('tasks', JSON.stringify(tasks))\n            } else {\n                // Get what's in LS already\n                tasks = JSON.parse(localStorage.getItem('tasks'))\n                // Push new project\n                tasks.push(task)\n                // Reset LS\n                localStorage.setItem('tasks', JSON.stringify(tasks))\n            }\n        },\n\n        getTasksFromStorage: function(){\n            let tasks\n            if(localStorage.getItem('tasks') === null){\n                tasks = []\n            } else {\n                tasks = JSON.parse(localStorage.getItem('tasks'))\n            }\n            return tasks\n        },\n\n        updateTaskStorage: function(updatedTask){\n            let tasks = JSON.parse(localStorage.getItem('tasks'))\n            tasks.forEach(function(task, index) {\n                if(updatedTask.id === task.id){\n                    tasks.splice(index, 1, updatedTask)\n                }\n                localStorage.setItem('tasks', JSON.stringify(tasks))\n            })\n        },\n\n        deleteTaskFromStorage: function(id){\n            let tasks = JSON.parse(localStorage.getItem('tasks'))\n            tasks.forEach(function(task, index) {\n                if(id === task.id){\n                    tasks.splice(index, 1)\n                }\n                localStorage.setItem('tasks', JSON.stringify(tasks))\n            })\n        },\n\n        storeProject: function(project){\n            let projects\n            // Check for items in LS\n            if(localStorage.getItem('projects') === null){\n                projects = []\n                // Push new project\n                projects.push(project)\n                // Set LS\n                localStorage.setItem('projects', JSON.stringify(projects))\n            } else {\n                // Get what's in LS already\n                projects = JSON.parse(localStorage.getItem('projects'))\n                // Push new project\n                projects.push(project)\n                // Reset LS\n                localStorage.setItem('projects', JSON.stringify(projects))\n            }\n        },\n\n        getProjectsFromStorage: function(){\n            let projects\n            if(localStorage.getItem('projects') === null){\n                projects = []\n            } else {\n                projects = JSON.parse(localStorage.getItem('projects'))\n            }\n            return projects\n        },\n\n        updateProjectStorage: function(updatedProject){\n            let projects = JSON.parse(localStorage.getItem('projects'))\n            projects.forEach(function(project, index) {\n                if(updatedProject.id === project.id){\n                    projects.splice(index, 1, updatedProject)\n                }\n                localStorage.setItem('projects', JSON.stringify(projects))\n            })\n        },\n\n        deleteProjectFromStorage: function(id){\n            let projects = JSON.parse(localStorage.getItem('projects'))\n            projects.forEach(function(project, index) {\n                if(id === project.id){\n                    projects.splice(index, 1)\n                }\n                localStorage.setItem('projects', JSON.stringify(projects))\n            })\n        }\n    }\n})()\n\n\n\n//# sourceURL=webpack://todo-app/./src/storage.js?");

/***/ }),

/***/ "./src/taskctrl.js":
/*!*************************!*\
  !*** ./src/taskctrl.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TaskCtrl\": () => (/* binding */ TaskCtrl)\n/* harmony export */ });\n/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./storage */ \"./src/storage.js\");\n\n\n// Task Controller\nconst TaskCtrl = (function(){\n    // Task constructor\n    const Task = function(id, name, description){\n        this.id = id\n        this.name = name\n        this.description = description\n    }\n\n    // Project constructor\n    const Project = function(id, name) {\n        this.id = id\n        this.name = name\n    }\n\n    //Data structure / State\n    const data = {\n        projects: _storage__WEBPACK_IMPORTED_MODULE_0__.StorageCtrl.getProjectsFromStorage(),\n        tasks: _storage__WEBPACK_IMPORTED_MODULE_0__.StorageCtrl.getTasksFromStorage(),\n        currentTask: null,\n        currentProject: null,\n        currentList: null\n    }\n\n    // Public methods\n    return {\n\n        getProjects: function(){\n            return data.projects\n        },\n\n        getTasks: function(){\n            return data.tasks\n        },\n\n        addProject: function(name){\n            // Generate an ID\n            let ID;\n            if(data.projects.length > 0){\n                ID = data.projects[data.projects.length -1].id +1\n            } else {\n                ID = 0\n            }\n            // Create new project\n            const newProject = new Project(ID, name)\n            // Add to data structure\n            data.projects.push(newProject)\n            return newProject\n        },\n\n        addTask: function(name, description){\n            // Generate an ID\n            let ID;\n            if(data.tasks.length > 0){\n                ID = data.tasks[data.tasks.length -1].id +1\n            } else {\n                ID = 0\n            }\n\n            // Create new task\n            const newTask = new Task(ID, name, description)\n            // Add to data structure\n            data.tasks.push(newTask)\n            return newTask\n        },\n\n        getTaskById: function(id){\n            let found = null\n\n            data.tasks.forEach(task => {\n                if(task.id === id) {\n                    found = task\n                }\n            })\n            return found\n        },\n\n        updateTask: function(name, description) {\n            let found = null\n            // Update in data structure\n            data.tasks.forEach(task => {\n                if(task.id === data.currentTask.id) {\n                    task.name = name\n                    task.description = description\n                    found = task\n                }\n            })\n            return found\n        },\n\n        updateProject: function(name){\n            let found = null\n            // Update in data structure\n            data.projects.forEach(project => {\n                if(project.id === data.currentProject.id) {\n                    project.name = name\n                    found = project\n                }\n            })\n            return found\n        },\n\n        deleteTask: function(id){\n            const ids = data.tasks.map(task => task.id)\n            const index = ids.indexOf(id)\n            data.tasks.splice(index, 1)\n        },\n\n        deleteProject: function(id){\n            const ids = data.projects.map(project => project.id)\n            const index = ids.indexOf(id)\n            data.projects.splice(index, 1)\n        },\n\n        getProjectById: function(id){\n            let found = null\n            data.projects.forEach(project => {\n                if(project.id === id) {\n                    found = project\n                }\n            })\n            return found\n        },\n\n        setCurrentTask: function(task){\n            data.currentTask = task\n        },\n\n        getCurrentTask: function(){\n            return data.currentTask\n        },\n\n        setCurrentProject: function(project) {\n            data.currentProject = project\n        },\n\n        getCurrentProject: function(){\n            return data.currentProject\n        },\n\n        logData: function(){\n            return data\n        }\n    }\n})()\n\n\n\n//# sourceURL=webpack://todo-app/./src/taskctrl.js?");

/***/ }),

/***/ "./src/ui.js":
/*!*******************!*\
  !*** ./src/ui.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"UICtrl\": () => (/* binding */ UICtrl)\n/* harmony export */ });\n/* harmony import */ var _taskctrl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./taskctrl */ \"./src/taskctrl.js\");\n\n\n// UI Controller\nconst UICtrl = (function(){\n    const UISelectors = {\n        taskList: '.task-list',\n        taskListLis: '.task-list li',\n        projectList: '.project-list',\n        projectListLis: '.project-list li',\n        addTaskBtn: '.add-task',\n        deleteTaskBtn: '.delete-task',\n        updateTaskBtn: '.update-task',\n        cancelTaskBtn: '.cancel-update-task',\n        addProjectBtn: '.add-project',\n        deleteProjectBtn: '.delete-project',\n        updateProjectBtn: '.update-project',\n        cancelProjectBtn: '.cancel-update-project',\n        projectNameInput: '#project-name',\n        taskNameInput: '#task-name',\n        taskDescriptionInput: '#task-description'\n    }\n\n    // Public methods\n    return {\n        populateProjectList: function(projects){\n            let html = ''\n            projects.forEach(project => {\n                html += `<li class=\"list-group-item project-list-item\" id=\"project-${project.id}\"><strong>${project.name}</strong>\n                <div class=\"div float-end\">\n                    <a href=\"#\"><i class=\"delete-project las la-trash\"></i></a>\n                    <a href=\"#\"><i class=\"edit-project las la-pen\"></i></a>\n                </div>\n            </li>`\n            })\n            // Insert project \n            document.querySelector(UISelectors.projectList).innerHTML = html\n        },\n\n        populateTaskList: function(tasks){\n            let html = ''\n            tasks.forEach(task => {\n                html += `<li class=\"list-group-item task-list-item\" id=\"task-${task.id}\"><strong>${task.name}: </strong>  <em>${task.description}</em>\n                <div class=\"div float-end\">\n                    <a href=\"#\"><i class=\"delete-task las la-trash\"></i></a>\n                    <a href=\"#\"><i class=\"edit-task las la-pen\"></i></a>\n                </div>\n            </li>`\n            })\n            // Insert task\n            document.querySelector(UISelectors.taskList).innerHTML = html\n        },\n\n        getSelectors: function(){\n            return UISelectors\n        },\n\n        getProjectInput: function(){\n            return {\n                name: document.querySelector(UISelectors.projectNameInput).value\n            }\n        },\n\n        getTaskInput: function(){\n            return {\n                name: document.querySelector(UISelectors.taskNameInput).value,\n                description: document.querySelector(UISelectors.taskDescriptionInput).value\n            }\n        },\n\n        addTaskUI: function(task){\n            // Create li element\n            const li = document.createElement('li')\n            // Add class\n            li.className = \"list-group-item task-list-item\"\n            // Add id\n            li.id = `task-${task.id}`\n            // Add html\n            li.innerHTML = `<strong>${task.name}: </strong>  <em>${task.description}</em>\n            <div class=\"div float-end\">\n                <a href=\"#\"><i class=\"delete-task las la-trash\"></i></a>\n                <a href=\"#\"><i class=\"edit-task las la-pen\"></i></a>\n            </div>`\n            // Insert task\n            document.querySelector(UISelectors.taskList).insertAdjacentElement('beforeend', li)\n        },\n\n        updateTaskList: function(task) {\n            let listItems = document.querySelectorAll(UISelectors.taskListLis)\n            listItems = Array.from(listItems)\n            listItems.forEach(listItem => {\n                const taskId = listItem.getAttribute('id')\n\n                if(taskId === `task-${task.id}`){\n                    document.querySelector(`#${taskId}`).innerHTML = `<strong>${task.name}: </strong>  <em>${task.description}</em>\n                    <div class=\"div float-end\">\n                        <a href=\"#\"><i class=\"delete-task las la-trash\"></i></a>\n                        <a href=\"#\"><i class=\"edit-task las la-pen\"></i></a>\n                    </div>`\n                }\n            })\n        },\n\n        addProjectUI: function(project){\n            // Create li element\n            const li = document.createElement('li')\n            // Add class\n            li.className = \"list-group-item project-list-item\"\n            // Add id\n            li.id = `project-${project.id}`\n            // Add html\n            li.innerHTML = `<strong>${project.name}</strong>\n            <div class=\"div float-end\">\n                <a href=\"#\"><i class=\"delete-project las la-trash\"></i></a>\n                <a href=\"#\"><i class=\"edit-project las la-pen\"></i></a>\n            </div>`\n            // Insert task\n            document.querySelector(UISelectors.projectList).insertAdjacentElement('beforeend', li)\n        },\n\n        updateProjectList: function(project){\n            let listItems = document.querySelectorAll(UISelectors.projectListLis)\n            listItems = Array.from(listItems)\n            listItems.forEach(listItem => {\n                const projectId = listItem.getAttribute('id')\n\n                if(projectId === `project-${project.id}`){\n                    document.querySelector(`#${projectId}`).innerHTML = `<strong>${project.name}</strong>\n                    <div class=\"div float-end\">\n                        <a href=\"#\"><i class=\"delete-project las la-trash\"></i></a>\n                        <a href=\"#\"><i class=\"edit-project las la-pen\"></i></a>\n                    </div>`\n                }\n            })\n        },\n\n        deleteTaskUI: function(id){\n            const taskId = `#task-${id}`\n            const task = document.querySelector(taskId)\n            task.remove()\n        },\n\n        deleteProjectUI: function(id){\n            const projectId = `#project-${id}`\n            const project = document.querySelector(projectId)\n            project.remove()\n        },\n\n        clearTaskInput: function(){\n            document.querySelector(UISelectors.taskNameInput).value = ''\n            document.querySelector(UISelectors.taskDescriptionInput).value = ''\n        },\n\n        clearProjectInput: function(){\n            document.querySelector(UISelectors.projectNameInput).value = ''\n        },\n\n        clearTaskEditState: function(){\n            UICtrl.clearTaskInput()\n            document.querySelector(UISelectors.updateTaskBtn).style.display = 'none'\n            document.querySelector(UISelectors.cancelTaskBtn).style.display = 'none'\n            document.querySelector(UISelectors.addTaskBtn).style.display = 'inline'\n        },\n\n        showTaskEditState: function(){\n            document.querySelector(UISelectors.updateTaskBtn).style.display = 'inline'\n            document.querySelector(UISelectors.cancelTaskBtn).style.display = 'inline'\n            document.querySelector(UISelectors.addTaskBtn).style.display = 'none'\n        },\n\n        clearProjectEditState: function(){\n            UICtrl.clearProjectInput()\n            document.querySelector(UISelectors.updateProjectBtn).style.display = 'none'\n            document.querySelector(UISelectors.cancelProjectBtn).style.display = 'none'\n            document.querySelector(UISelectors.addProjectBtn).style.display = 'inline'\n        },\n\n        showProjectEditState: function(){\n            document.querySelector(UISelectors.updateProjectBtn).style.display = 'inline'\n            document.querySelector(UISelectors.cancelProjectBtn).style.display = 'inline'\n            document.querySelector(UISelectors.addProjectBtn).style.display = 'none'\n        },\n\n        addTaskToEdit: function(){\n            document.querySelector(UISelectors.taskNameInput).value = _taskctrl__WEBPACK_IMPORTED_MODULE_0__.TaskCtrl.getCurrentTask().name\n            document.querySelector(UISelectors.taskDescriptionInput).value = _taskctrl__WEBPACK_IMPORTED_MODULE_0__.TaskCtrl.getCurrentTask().description\n            UICtrl.showTaskEditState()\n        },\n\n        addProjectToEdit: function(){\n            document.querySelector(UISelectors.projectNameInput).value = _taskctrl__WEBPACK_IMPORTED_MODULE_0__.TaskCtrl.getCurrentProject().name\n            UICtrl.showProjectEditState()\n        }\n    }\n\n})()\n\n\n\n//# sourceURL=webpack://todo-app/./src/ui.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;