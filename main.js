/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("// Storage Controller\nconst StorageCtrl = (function(){\n\n})()\n\n// UI Controller\nconst UICtrl = (function(){\n    const UISelectors = {\n        taskList: '.task-list',\n        taskListLis: '.task-list li',\n        projectList: '.project-list',\n        projectListLis: '.project-list li',\n        addTaskBtn: '.add-task',\n        deleteTaskBtn: '.delete-task',\n        updateTaskBtn: '.update-task',\n        cancelTaskBtn: '.cancel-update-task',\n        addProjectBtn: '.add-project',\n        deleteProjectBtn: '.delete-project',\n        updateProjectBtn: '.update-project',\n        cancelProjectBtn: '.cancel-update-project',\n        projectNameInput: '#project-name',\n        taskNameInput: '#task-name',\n        taskDescriptionInput: '#task-description'\n    }\n\n    // Public methods\n    return {\n        populateProjectList: function(projects){\n            let html = ''\n\n            projects.forEach(project => {\n                html += `<li class=\"list-group-item project-list-item\" id=\"project-${project.id}\"><strong>Item One</strong>\n                <div class=\"div float-end\">\n                    <a href=\"#\"><i class=\"delete-project las la-trash\"></i></a>\n                    <a href=\"#\"><i class=\"edit-project las la-pen\"></i></a>\n                </div>\n            </li>`\n            })\n\n            // Insert project \n            document.querySelector(UISelectors.projectList).innerHTML = html\n        },\n\n        populateTaskList: function(tasks){\n            let html = ''\n\n            tasks.forEach(task => {\n                html += `<li class=\"list-group-item task-list-item\" id=\"task-${task.id}\"><strong>${task.name}: </strong>  <em>${task.description}</em>\n                <div class=\"div float-end\">\n                    <a href=\"#\"><i class=\"delete-task las la-trash\"></i></a>\n                    <a href=\"#\"><i class=\"edit-task las la-pen\"></i></a>\n                </div>\n            </li>`\n            })\n\n            // Insert task\n            document.querySelector(UISelectors.taskList).innerHTML = html\n        },\n\n        getSelectors: function(){\n            return UISelectors\n        },\n\n        getProjectInput: function(){\n            return {\n                name: document.querySelector(UISelectors.projectNameInput).value\n            }\n        },\n\n        getTaskInput: function(){\n            return {\n                name: document.querySelector(UISelectors.taskNameInput).value,\n                description: document.querySelector(UISelectors.taskDescriptionInput).value\n            }\n        },\n\n        addTaskUI: function(task){\n            // Create li element\n            const li = document.createElement('li')\n            // Add class\n            li.className = \"list-group-item task-list-item\"\n            // Add id\n            li.id = `task-${task.id}`\n            // Add html\n            li.innerHTML = `<strong>${task.name}: </strong>  <em>${task.description}</em>\n            <div class=\"div float-end\">\n                <a href=\"#\"><i class=\"delete-task las la-trash\"></i></a>\n                <a href=\"#\"><i class=\"edit-task las la-pen\"></i></a>\n            </div>`\n            // Insert task\n            document.querySelector(UISelectors.taskList).insertAdjacentElement('beforeend', li)\n        },\n\n        updateTaskList: function(task) {\n            let listItems = document.querySelectorAll(UISelectors.taskListLis)\n            listItems = Array.from(listItems)\n            listItems.forEach(listItem => {\n                const taskId = listItem.getAttribute('id')\n\n                if(taskId === `task-${task.id}`){\n                    document.querySelector(`#${taskId}`).innerHTML = `<strong>${task.name}: </strong>  <em>${task.description}</em>\n                    <div class=\"div float-end\">\n                        <a href=\"#\"><i class=\"delete-task las la-trash\"></i></a>\n                        <a href=\"#\"><i class=\"edit-task las la-pen\"></i></a>\n                    </div>`\n                }\n            })\n        },\n\n        addProjectUI: function(project){\n            // Create li element\n            const li = document.createElement('li')\n            // Add class\n            li.className = \"list-group-item project-list-item\"\n            // Add id\n            li.id = `project-${project.id}`\n            // Add html\n            li.innerHTML = `<strong>${project.name}</strong>\n            <div class=\"div float-end\">\n                <a href=\"#\"><i class=\"delete-project las la-trash\"></i></a>\n                <a href=\"#\"><i class=\"edit-project las la-pen\"></i></a>\n            </div>`\n            // Insert task\n            document.querySelector(UISelectors.projectList).insertAdjacentElement('beforeend', li)\n        },\n\n        updateProjectList: function(project){\n            let listItems = document.querySelectorAll(UISelectors.projectListLis)\n            listItems = Array.from(listItems)\n            listItems.forEach(listItem => {\n                const projectId = listItem.getAttribute('id')\n\n                if(projectId === `project-${project.id}`){\n                    document.querySelector(`#${projectId}`).innerHTML = `<strong>${project.name}</strong>\n                    <div class=\"div float-end\">\n                        <a href=\"#\"><i class=\"delete-project las la-trash\"></i></a>\n                        <a href=\"#\"><i class=\"edit-project las la-pen\"></i></a>\n                    </div>`\n                }\n            })\n        },\n\n        clearTaskInput: function(){\n            document.querySelector(UISelectors.taskNameInput).value = ''\n            document.querySelector(UISelectors.taskDescriptionInput).value = ''\n        },\n\n        clearProjectInput: function(){\n            document.querySelector(UISelectors.projectNameInput).value = ''\n        },\n\n        clearTaskEditState: function(){\n            UICtrl.clearTaskInput()\n            document.querySelector(UISelectors.updateTaskBtn).style.display = 'none'\n            document.querySelector(UISelectors.cancelTaskBtn).style.display = 'none'\n            document.querySelector(UISelectors.addTaskBtn).style.display = 'inline'\n        },\n\n        showTaskEditState: function(){\n            document.querySelector(UISelectors.updateTaskBtn).style.display = 'inline'\n            document.querySelector(UISelectors.cancelTaskBtn).style.display = 'inline'\n            document.querySelector(UISelectors.addTaskBtn).style.display = 'none'\n        },\n\n        clearProjectEditState: function(){\n            UICtrl.clearProjectInput()\n            document.querySelector(UISelectors.updateProjectBtn).style.display = 'none'\n            document.querySelector(UISelectors.cancelProjectBtn).style.display = 'none'\n            document.querySelector(UISelectors.addProjectBtn).style.display = 'inline'\n        },\n\n        showProjectEditState: function(){\n            document.querySelector(UISelectors.updateProjectBtn).style.display = 'inline'\n            document.querySelector(UISelectors.cancelProjectBtn).style.display = 'inline'\n            document.querySelector(UISelectors.addProjectBtn).style.display = 'none'\n        },\n\n        addTaskToEdit: function(){\n            document.querySelector(UISelectors.taskNameInput).value = TaskCtrl.getCurrentTask().name\n            document.querySelector(UISelectors.taskDescriptionInput).value = TaskCtrl.getCurrentTask().description\n            UICtrl.showTaskEditState()\n        },\n\n        addProjectToEdit: function(){\n            document.querySelector(UISelectors.projectNameInput).value = TaskCtrl.getCurrentProject().name\n            UICtrl.showProjectEditState()\n        }\n\n    }\n\n})()\n\n\n// Task Controller\nconst TaskCtrl = (function(){\n    // Task constructor\n    const Task = function(id, name, description){\n        this.id = id\n        this.name = name\n        this.description = description\n    }\n\n    // Project constructor\n    const Project = function(id, name) {\n        this.id = id\n        this.name = name\n    }\n\n    //Data structure / State\n    const data = {\n        projects: [\n            // {id: 0, name: \"Project One\"}\n        ],\n        tasks: [\n            // {id: 0, name: \"Task one\", description: \"my description\"},\n            // {id: 1, name: \"Task two\", description: \"my second description\"},\n            // {id: 2, name: \"Task three\", description: \"my third description\"}\n        ],\n        currentTask: null,\n        currentProject: null,\n        currentList: null\n    }\n\n    // Public methods\n    return {\n\n        getProjects: function(){\n            return data.projects\n        },\n\n        getTasks: function(){\n            return data.tasks\n        },\n\n        addProject: function(name){\n            // Generate an ID\n            let ID;\n            if(data.projects.length > 0){\n                ID = data.projects[data.projects.length -1].id +1\n            } else {\n                ID = 0\n            }\n\n            // Create new project\n            const newProject = new Project(ID, name)\n            // Add to data structure\n            data.projects.push(newProject)\n            return newProject\n        },\n\n        addTask: function(name, description){\n            // Generate an ID\n            let ID;\n            if(data.tasks.length > 0){\n                ID = data.tasks[data.tasks.length -1].id +1\n            } else {\n                ID = 0\n            }\n\n            // Create new task\n            const newTask = new Task(ID, name, description)\n            // Add to data structure\n            data.tasks.push(newTask)\n\n            return newTask\n        },\n\n        getTaskById: function(id){\n            let found = null\n\n            data.tasks.forEach(task => {\n                if(task.id === id) {\n                    found = task\n                }\n            })\n            return found\n        },\n\n        updateTask: function(name, description) {\n            let found = null\n            // Update in data structure\n            data.tasks.forEach(task => {\n                if(task.id === data.currentTask.id) {\n                    task.name = name\n                    task.description = description\n                    found = task\n                }\n            })\n            return found\n        },\n\n        updateProject: function(name){\n            let found = null\n            // Update in data structure\n            data.projects.forEach(project => {\n                if(project.id === data.currentProject.id) {\n                    project.name = name\n                    found = project\n                }\n            })\n            return found\n        },\n\n        getProjectById: function(id){\n            let found = null\n            \n            data.projects.forEach(project => {\n                if(project.id === id) {\n                    found = project\n                }\n            })\n            return found\n        },\n\n        setCurrentTask: function(task){\n            data.currentTask = task\n        },\n\n        getCurrentTask: function(){\n            return data.currentTask\n        },\n\n        setCurrentProject: function(project) {\n            data.currentProject = project\n        },\n\n        getCurrentProject: function(){\n            return data.currentProject\n        },\n\n        logData: function(){\n            return data\n        }\n    }\n})()\n\n\n// App Controller\nconst App = (function(TaskCtrl, UICtrl){\n\n    const loadEventListeners = function(){\n        const UISelectors = UICtrl.getSelectors()\n\n        // Add task event \n        document.querySelector(UISelectors.addTaskBtn).addEventListener('click', taskAddSubmit)\n\n        // Edit task event\n        document.querySelector(UISelectors.taskList).addEventListener('click', editTask)\n\n        // Update task event\n        document.querySelector(UISelectors.updateTaskBtn).addEventListener('click', updateTaskSubmit)\n\n        // Add project event\n        document.querySelector(UISelectors.addProjectBtn).addEventListener('click', projectAddSubmit)\n\n        // Edit project event\n        document.querySelector(UISelectors.projectList).addEventListener('click', editProject)\n\n        // Update project event\n        document.querySelector(UISelectors.updateProjectBtn).addEventListener('click', updateProjectSubmit)\n\n\n    }\n\n    const projectAddSubmit = function(e){\n        // Get form input from UI controller\n        const input = UICtrl.getProjectInput()\n\n        // Check for empty input\n        if(input.name !== '') {\n            // Add task\n            const newProject = TaskCtrl.addProject(input.name)\n            // Add project to UI\n            UICtrl.addProjectUI(newProject)\n            // Clear fields\n            UICtrl.clearProjectInput();\n        }\n        e.preventDefault()\n    }\n\n    const taskAddSubmit = function(e){\n        // Get form input from UI controller\n        const input = UICtrl.getTaskInput()\n\n        // Check for empty input\n        if(input.name !== '' && input.description !== '') {\n            // Add task\n            const newTask = TaskCtrl.addTask(input.name, input.description)\n            // Add task to UI\n            UICtrl.addTaskUI(newTask)\n            // Clear fields\n            UICtrl.clearTaskInput();\n        } \n        e.preventDefault()\n    }\n\n    const editTask = function(e){\n        if(e.target.classList.contains('edit-task')){\n            // Get great grandparent id\n            const taskId = e.target.parentElement.parentElement.parentElement.id;\n            // Split\n            const taskIdArray = taskId.split('-')\n            // Get actual id\n            const id = parseInt(taskIdArray[1])\n            // Get task\n            const taskToEdit = TaskCtrl.getTaskById(id)\n            // Set current item\n            TaskCtrl.setCurrentTask(taskToEdit)\n            // Add task to form for editing\n            UICtrl.addTaskToEdit();\n        } \n        e.preventDefault()\n    }\n\n    const updateTaskSubmit = function(e) {\n        // Get task input\n        const input = UICtrl.getTaskInput()\n        // Update task\n        const updatedTask = TaskCtrl.updateTask(input.name, input.description)\n        // Update UI\n        UICtrl.updateTaskList(updatedTask)\n        // Clear fields\n        UICtrl.clearTaskEditState()\n\n        e.preventDefault()\n    }\n\n    const editProject = function(e) {\n        if(e.target.classList.contains('edit-project')){\n            // Get great grandparent id\n            const projectId = e.target.parentElement.parentElement.parentElement.id;\n            // Split\n            const projectIdArray = projectId.split('-')\n            // Get actual id\n            const id = parseInt(projectIdArray[1])\n            // Get task\n            const projectToEdit = TaskCtrl.getProjectById(id)\n            // Set current item\n            TaskCtrl.setCurrentProject(projectToEdit)\n            // Add task to form for editing\n            UICtrl.addProjectToEdit();\n        } else {\n            console.log('not working')\n        }\n        e.preventDefault()\n    }\n\n    const updateProjectSubmit = function(e) {\n        // Get task input\n        const input = UICtrl.getProjectInput()\n        // Update task\n        const updatedProject = TaskCtrl.updateProject(input.name)\n        // Update UI\n        UICtrl.updateProjectList(updatedProject)\n        // Clear fields\n        UICtrl.clearProjectEditState()\n\n        e.preventDefault()\n    }\n\n    // Public methods\n    return {\n        init: function(){\n            // Set initial state\n            UICtrl.clearProjectEditState()\n            UICtrl.clearTaskEditState()\n            // Fetch items from data structure\n            const tasks = TaskCtrl.getTasks()\n            // Populate list with items\n            UICtrl.populateTaskList(tasks)\n            // Fetch projects from data structure\n            const projects = TaskCtrl.getProjects()\n            // Populate list with projects\n            UICtrl.populateProjectList(projects)\n            // Load event listeners\n            loadEventListeners()\n        }\n    }\n  }\n)(TaskCtrl, UICtrl)\n\nApp.init()\n\n//# sourceURL=webpack://todo-app/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;